type UserProfileFull = 
 record {
   address: text;
   helpRequests: vec HelpRequestViewPublic;
   helpRequestsNotifications: vec HelperRequestNotifictions;
   location: opt Location;
   name: opt PersonName;
   organizations: vec OrganizationProfile;
   rewards: nat;
   userId: text;
   userName: text;
 };
type UserProfile = 
 record {
   address: text;
   location: opt Location;
   name: opt PersonName;
   userName: text;
 };
type UserId = text;
type Timestamp = int;
type PersonName = 
 record {
   first: text;
   full: text;
   last: text;
   middle: text;
 };
type PersonId = nat;
type PersonCreate = 
 record {
   address: text;
   age: nat;
   location: opt Location;
   name: PersonName;
   organizationId: OrganizationId;
 };
type Person = 
 record {
   address: text;
   age: nat;
   createdAt: Timestamp;
   location: opt Location;
   name: PersonName;
   organizationId: OrganizationId;
   personId: PersonId;
   userId: opt UserId;
 };
type OrganizationPublic = 
 record {
   about: text;
   createdAt: Timestamp;
   location: opt Location;
   logoPic: opt LogoPic;
   name: text;
   organziationId: OrganizationId;
   tags: vec text;
   userName: text;
 };
type OrganizationProfile = 
 record {
   about: text;
   createdAt: Timestamp;
   location: opt Location;
   logoPic: opt LogoPic;
   name: text;
   organziationId: OrganizationId;
   persons: vec Person;
   requests: vec HelpRequest;
   tags: vec text;
   userId: UserId;
   userName: text;
 };
type OrganizationId = nat;
type OrganizationEdit = 
 record {
   about: text;
   location: opt Location;
   logoPic: opt LogoPic;
   name: text;
   organziationId: OrganizationId;
   tags: vec text;
   userName: text;
 };
type OrganizationCreate = 
 record {
   about: text;
   name: text;
   userName: text;
 };
type LogoPic = vec nat8;
type Location = 
 record {
   lat: float64;
   lng: float64;
 };
type HelperRequestNotifictions = 
 record {
   createdAt: Timestamp;
   message: text;
   organizationId: OrganizationId;
   read: bool;
   requestId: HelpRequestId;
   updatedAt: Timestamp;
   userId: opt UserId;
 };
type Helper = 
 record {
   acceptComplete: bool;
   approved: bool;
   complete: bool;
   createdAt: Timestamp;
   updatedAt: Timestamp;
   userId: UserId;
 };
type HelpRequestViewPublic = 
 record {
   approvedHelper: opt Helper;
   createdAt: Timestamp;
   description: text;
   dueDate: Timestamp;
   dueDateText: text;
   location: opt Location;
   name: text;
   organization: OrganizationPublic;
   organizationId: OrganizationId;
   requestId: HelpRequestId;
   rewardAmount: nat;
   startDate: Timestamp;
   startDateText: text;
   status: HelpRequestStatus;
   tags: vec text;
   userId: UserId;
 };
type HelpRequestStatus = 
 variant {
   active;
   approved;
   completed;
   inProgress;
 };
type HelpRequestInit = 
 record {
   description: text;
   dueDate: Timestamp;
   dueDateText: text;
   location: opt Location;
   name: text;
   person: opt PersonCreate;
   personId: opt PersonId;
   rewardAmount: nat;
   startDate: Timestamp;
   startDateText: text;
   tags: vec text;
 };
type HelpRequestId = nat;
type HelpRequest = 
 record {
   approvedHelper: opt Helper;
   createdAt: Timestamp;
   description: text;
   dueDate: Timestamp;
   dueDateText: text;
   helpers: vec Helper;
   location: opt Location;
   name: text;
   organizationId: OrganizationId;
   personId: PersonId;
   requestId: HelpRequestId;
   rewardAmount: nat;
   startDate: Timestamp;
   startDateText: text;
   status: HelpRequestStatus;
   tags: vec text;
   userId: UserId;
   viewCount: nat;
 };
type API = 
 service {
   acceptCompleteHelperRequest: (HelpRequestId, UserId) -> (opt bool);
   acceptHelperRequest: (HelpRequestId, UserId) -> (opt bool);
   applyForHelpRequest: (HelpRequestId) -> (opt bool);
   checkUsernameAvailable: (text) -> (bool) query;
   completeHelperRequest: (HelpRequestId) -> (opt bool);
   createHelpRequest: (OrganizationId, HelpRequestInit) -> (opt HelpRequest);
   createOrganization: (OrganizationCreate) -> (opt OrganizationProfile);
   createProfile: (UserProfile) -> (opt UserProfileFull);
   editOrganization: (OrganizationId, OrganizationEdit) -> (opt bool);
   getFeedItems: (opt nat) -> (opt vec HelpRequestViewPublic) query;
   getOrganizationProfile: (OrganizationId) ->
    (opt OrganizationProfile) query;
   getOrganizationPublic: (OrganizationId) -> (opt OrganizationPublic) query;
   getProfileFull: () -> (opt UserProfileFull) query;
   getUserNameByPrincipal: (principal) -> (opt vec UserId) query;
   getUserProfile: (UserId) -> (opt UserProfile) query;
   getUsersPublic: (opt nat) -> (opt vec UserProfile) query;
   updateUserProfile: (UserId, UserProfile) -> (opt bool);
   whoami: () -> (principal) query;
 };
service : () -> API
