type UserProfile__1 = record {userName: text;};
type UserProfileFull = 
 record {
   rewards: nat;
   userName: text;
 };
type UserProfile = record {userName: text;};
type UserId__1 = text;
type UserId = text;
type Timestamp = int;
type Status = 
 variant {
   accepted: UserId__1;
   active;
   confirmed;
 };
type Location = 
 record {
   lat: float64;
   lng: float64;
 };
type HelpRequestInit = 
 record {
   caption: text;
   name: text;
   tags: vec text;
 };
type HelpRequestId = nat;
type HelpRequest = 
 record {
   caption: text;
   createdAt: Timestamp;
   location: opt Location;
   name: text;
   requestId: HelpRequestId;
   status: Status;
   tags: vec text;
   userId: UserId__1;
   viewCount: nat;
 };
type API = 
 service {
   checkUsernameAvailable: (text) -> (bool) query;
   createHelpRequest: (HelpRequestInit) -> (opt HelpRequestId);
   createProfile: (text) -> (opt UserProfileFull);
   getFeedItems: (opt nat) -> (opt vec HelpRequest) query;
   getProfileFull: (principal, UserId) -> (opt UserProfileFull) query;
   getUserNameByPrincipal: (principal) -> (opt vec text);
   getUserProfile: (UserId) -> (opt UserProfile__1) query;
   getUsersPublic: (opt nat) -> (opt vec UserProfile) query;
   whoami: () -> (principal) query;
 };
service : () -> API
